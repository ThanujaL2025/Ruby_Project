<!DOCTYPE html>
<html>
<head>
  <title>Multi-Platform Integration Demo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #333;
      line-height: 1.6;
      min-height: 100vh;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .header {
      text-align: center;
      margin-bottom: 40px;
      padding: 40px;
      background: white;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .header h1 {
      color: #2c3e50;
      font-size: 3rem;
      margin-bottom: 15px;
      font-weight: 700;
    }

    .header p {
      color: #7f8c8d;
      font-size: 1.3rem;
      max-width: 600px;
      margin: 0 auto;
    }

    .test-section {
      background: white;
      border-radius: 16px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .test-section h2 {
      color: #2c3e50;
      margin-bottom: 25px;
      font-size: 2rem;
      border-bottom: 3px solid #3498db;
      padding-bottom: 15px;
      text-align: center;
    }

    .button-group {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
      margin-bottom: 25px;
    }

    .btn {
      padding: 18px 30px;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .btn-primary {
      background: #3498db;
      color: white;
    }

    .btn-primary:hover {
      background: #2980b9;
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(52, 152, 219, 0.4);
    }

    .btn-success {
      background: #27ae60;
      color: white;
    }

    .btn-success:hover {
      background: #229954;
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(39, 174, 96, 0.4);
    }

    .btn-info {
      background: #17a2b8;
      color: white;
    }

    .btn-info:hover {
      background: #138496;
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(23, 162, 184, 0.4);
    }

    .btn-warning {
      background: #ffc107;
      color: #212529;
    }

    .btn-warning:hover {
      background: #e0a800;
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(255, 193, 7, 0.4);
    }

    .results-section {
      background: #f8f9fa;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      padding: 25px;
      margin-top: 20px;
    }

    .results-section h3 {
      color: #495057;
      margin-bottom: 20px;
      font-size: 1.4rem;
      border-bottom: 2px solid #dee2e6;
      padding-bottom: 10px;
    }

    .platform-status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .platform-card {
      background: white;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      padding: 20px;
      text-align: center;
    }

    .platform-card h4 {
      color: #2c3e50;
      margin-bottom: 15px;
      font-size: 1.3rem;
    }

    .platform-card p {
      color: #7f8c8d;
      margin-bottom: 15px;
      font-size: 1rem;
    }

    .platform-card.connected {
      border-color: #27ae60;
      background: #f0fdf4;
    }

    .platform-card.not-connected {
      border-color: #e74c3c;
      background: #fdf2f2;
    }

    .loading {
      text-align: center;
      padding: 30px;
      color: #7f8c8d;
      font-style: italic;
      font-size: 1.1rem;
    }

    .error {
      color: #e74c3c;
      background: #fdf2f2;
      border: 2px solid #fecaca;
      border-radius: 8px;
      padding: 20px;
      margin: 15px 0;
      font-weight: 500;
    }

    .success {
      color: #27ae60;
      background: #f0fdf4;
      border: 2px solid #bbf7d0;
      border-radius: 8px;
      padding: 20px;
      margin: 15px 0;
      font-weight: 500;
    }

    .user-profile {
      background: white;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      padding: 20px;
      margin: 15px 0;
    }

    .user-profile h5 {
      color: #2c3e50;
      margin-bottom: 15px;
      font-size: 1.2rem;
    }

    .user-profile pre {
      background: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 6px;
      padding: 15px;
      overflow-x: auto;
      font-size: 0.9rem;
      max-height: 400px;
      overflow-y: auto;
    }

    .input-group {
      background: #f8f9fa;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      padding: 25px;
      margin: 20px 0;
      text-align: center;
    }

    .input-group label {
      display: block;
      color: #495057;
      margin-bottom: 10px;
      font-weight: 600;
      font-size: 1.1rem;
    }

    .input-group input {
      width: 100%;
      max-width: 400px;
      padding: 12px 16px;
      border: 2px solid #dee2e6;
      border-radius: 8px;
      font-size: 1rem;
      margin-bottom: 15px;
    }

    .input-group input:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    @media (max-width: 768px) {
      .header h1 {
        font-size: 2.5rem;
      }
      
      .button-group {
        grid-template-columns: 1fr;
      }
      
      .platform-status-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üéØ Multi-Platform Integration Demo</h1>
      <p>Professional demonstration of unified data collection across multiple HR systems and Zendesk</p>
    </div>

    <!-- Platform Status Section -->
    <div class="test-section">
      <h2>üîó Platform Connection Status</h2>
      <div class="button-group">
        <button class="btn btn-info" onclick="checkPlatformStatus()">
          üìä Check All Platform Status
        </button>
      </div>
      <div id="platform-status-results" class="results-section" style="display: none;">
        <h3>Platform Connection Status:</h3>
        <div id="platform-status-content"></div>
      </div>
    </div>

    <!-- YouTube Users Section -->
    <div class="test-section">
      <h2>üë• YouTube Users Data Collection</h2>
      <div class="button-group">
        <button class="btn btn-primary" onclick="getAllYouTubeUsers()">
          üìã Collect ALL YouTube Users Data
        </button>
        <button class="btn btn-success" onclick="getYouTubeUserProfile()">
          üë§ Get Specific User Profile
        </button>
      </div>
      
      <div class="input-group" id="user-email-input" style="display: none;">
        <label for="user-email">Enter YouTube User Email:</label>
        <input type="email" id="user-email" placeholder="user@example.com">
        <button class="btn btn-success" onclick="getYouTubeUserProfile()" style="margin-top: 10px;">
          üîç Search User
        </button>
      </div>
      
      <div id="youtube-users-results" class="results-section" style="display: none;">
        <h3>Data Collection Results:</h3>
        <div id="youtube-users-content"></div>
      </div>
    </div>

    <!-- Individual Platform Testing -->
    <div class="test-section">
      <h2>üß™ Individual Platform Testing</h2>
      <div class="button-group">
        <button class="btn btn-warning" onclick="testHR1()">
          üè¢ Test HR1 System
        </button>
        <button class="btn btn-warning" onclick="testHR2()">
          üè¢ Test HR2 System
        </button>
        <button class="btn btn-warning" onclick="testHR3()">
          üè¢ Test HR3 System
        </button>
        <button class="btn btn-warning" onclick="testZendesk()">
          üé´ Test Zendesk System
        </button>
        <button class="btn btn-warning" onclick="testYouTube()">
          üì∫ Test YouTube System
        </button>
      </div>
      
      <div id="platform-test-results" class="results-section" style="display: none;">
        <h3>Platform Test Results:</h3>
        <div id="platform-test-content"></div>
      </div>
    </div>
  </div>

  <script>
    // Check platform connection status
    async function checkPlatformStatus() {
      showLoading('platform-status-content', 'üîç Checking platform connections...');
      showResults('platform-status-results');
      
      try {
        const response = await fetch('/platform_status');
        const data = await response.json();
        
        if (data.success) {
          displayPlatformStatus(data.platforms);
        } else {
          showError('platform-status-content', `Failed to get platform status: ${data.message}`);
        }
      } catch (error) {
        showError('platform-status-content', `Error: ${error.message}`);
      }
    }

    // Display platform status
    function displayPlatformStatus(platforms) {
      const container = document.getElementById('platform-status-content');
      
      let html = '<div class="platform-status-grid">';
      
      Object.entries(platforms).forEach(([platform, info]) => {
        const statusClass = info.connected ? 'connected' : 'not-connected';
        const statusIcon = info.connected ? '‚úÖ' : '‚ùå';
        const statusText = info.connected ? 'Connected' : 'Not Connected';
        
        html += `
          <div class="platform-card ${statusClass}">
            <h4>${statusIcon} ${platform.toUpperCase()}</h4>
            <p><strong>Status:</strong> ${statusText}</p>
            <p><strong>Connection ID:</strong> ${info.connection_id || 'N/A'}</p>
            <p><strong>Last Check:</strong> ${new Date().toLocaleTimeString()}</p>
          </div>
        `;
      });
      
      html += '</div>';
      container.innerHTML = html;
    }

    // Get all YouTube users data
    async function getAllYouTubeUsers() {
      showLoading('youtube-users-content', 'üìä Collecting YouTube users data from all platforms...');
      showResults('youtube-users-results');
      
      try {
        const response = await fetch('/youtube_users');
        const data = await response.json();
        
        if (data.success) {
          displayYouTubeUsers(data);
        } else {
          showError('youtube-users-content', `Failed to get YouTube users: ${data.message}`);
        }
      } catch (error) {
        showError('youtube-users-content', `Error: ${error.message}`);
      }
    }

    // Get specific YouTube user profile
    async function getYouTubeUserProfile() {
      const emailInput = document.getElementById('user-email-input');
      const email = document.getElementById('user-email').value;
      
      if (!email) {
        emailInput.style.display = 'block';
        return;
      }
      
      showLoading('youtube-users-content', `üîç Searching for user: ${email}...`);
      showResults('youtube-users-results');
      
      try {
        const response = await fetch(`/youtube_user_profile?email=${encodeURIComponent(email)}`);
        const data = await response.json();
        
        if (data.success) {
          displayUserProfile(data);
        } else {
          showError('youtube-users-content', `Failed to get user profile: ${data.message}`);
        }
      } catch (error) {
        showError('youtube-users-content', `Error: ${error.message}`);
      }
    }

    // Display YouTube users data
    function displayYouTubeUsers(data) {
      const container = document.getElementById('youtube-users-content');
      
      if (data.users && Object.keys(data.users).length > 0) {
        let html = `<div class="success">‚úÖ Successfully collected data for ${data.total_users} YouTube users</div>`;
        html += '<h4>User Profiles:</h4>';
        
        Object.entries(data.users).forEach(([email, userData]) => {
          html += `
            <div class="user-profile">
              <h5>üìß ${email}</h5>
              <pre>${JSON.stringify(userData.unified_profile, null, 2)}</pre>
            </div>
          `;
        });
        
        container.innerHTML = html;
      } else {
        container.innerHTML = '<div class="success">‚úÖ No users found or all data collected</div>';
      }
    }

    // Display user profile
    function displayUserProfile(data) {
      const container = document.getElementById('youtube-users-content');
      
      let html = '<div class="success">‚úÖ User profile retrieved successfully</div>';
      html += '<h4>Unified Profile:</h4>';
      html += `<pre>${JSON.stringify(data.user_profile, null, 2)}</pre>`;
      html += '<h4>Raw Data from All Sources:</h4>';
      html += `<pre>${JSON.stringify(data.raw_data, null, 2)}</pre>`;
      
      container.innerHTML = html;
    }

    // Test individual platforms
    async function testHR1() {
      await testPlatform('hr1', 'employees');
    }

    async function testHR2() {
      await testPlatform('hr2', 'employees');
    }

    async function testHR3() {
      await testPlatform('hr3', 'employees');
    }

    async function testZendesk() {
      await testPlatform('zendesk', 'tickets');
    }

    async function testYouTube() {
      await testPlatform('youtube', 'analytics');
    }

    // Generic platform testing function
    async function testPlatform(platform, dataType) {
      showLoading('platform-test-content', `üß™ Testing ${platform} ${dataType}...`);
      showResults('platform-test-results');
      
      try {
        // Get connection ID from platform status first
        const statusResponse = await fetch('/platform_status');
        const statusData = await statusResponse.json();
        
        if (statusData.success && statusData.platforms[platform]?.connection_id) {
          const connectionId = statusData.platforms[platform].connection_id;
          
          const response = await fetch(`/platform_data?platform=${platform}&data_type=${dataType}&connection_id=${connectionId}`);
          const data = await response.json();
          
          if (data.success) {
            displayPlatformTestResult(platform, dataType, data);
          } else {
            showError('platform-test-content', `${platform} ${dataType} test failed: ${data.message}`);
          }
        } else {
          showError('platform-test-content', `${platform} not connected. Please check platform status first.`);
        }
      } catch (error) {
        showError('platform-test-content', `Error testing ${platform}: ${error.message}`);
      }
    }

    // Display platform test results
    function displayPlatformTestResult(platform, dataType, data) {
      const container = document.getElementById('platform-test-content');
      
      let html = `<div class="success">‚úÖ ${platform} ${dataType} test successful</div>`;
      html += `<h4>${platform.toUpperCase()} ${dataType.toUpperCase()} Data:</h4>`;
      html += `<pre>${JSON.stringify(data.data, null, 2)}</pre>`;
      
      container.innerHTML = html;
    }

    // Utility functions
    function showLoading(containerId, message) {
      const container = document.getElementById(containerId);
      container.innerHTML = `<div class="loading">‚è≥ ${message}</div>`;
    }

    function showError(containerId, message) {
      const container = document.getElementById(containerId);
      container.innerHTML = `<div class="error">‚ùå ${message}</div>`;
    }

    function showResults(sectionId) {
      document.getElementById(sectionId).style.display = 'block';
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üéØ Multi-Platform Integration Demo Page Loaded');
      console.log('Ready to demonstrate unified data collection across multiple platforms!');
    });
  </script>
</body>
</html>
